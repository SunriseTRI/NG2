# DS_NG_BotV2.py (–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import os
import asyncio
import logging
from typing import List, Tuple
import os
import sys
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from transformers import AutoModelForCausalLM, AutoTokenizer
import torch

from database import create_tables, insert_user, get_all_faq_entries, save_generated_response, merge_faq_from_excel
from registration import RegistrationStates, validate_phone, validate_email, generate_password

from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)


tokenizer = None
model = None
# MODEL_NAME = "sberbank-ai/rugpt3medium"
MODEL_NAME = "gpt2"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ~"gpt2"~ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# MODEL_NAME = "deepseek-ai/DeepSeek-R1"
# MODEL_NAME = "burgasdotpro/Sebushka-llama-3.1-8B"
# MODEL_NAME = ""IlyaGusev/saiga_llama3_8b""
# MODEL_NAME = "vikras/rugpt3small_shtirlitz_joke"
# MODEL_NAME = "getdiffus/SDPB2-DivineEleganceMix"
# MODEL_NAME = "SiberiaSoft/SiberianFredT5-instructor"
# DEFAULT_SYSTEM_PROMPT = "–¢—ã ‚Äî –°–∞–π–≥–∞, —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢—ã —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å —Å –ª—é–¥—å–º–∏ –∏ –ø–æ–º–æ–≥–∞–µ—à—å –∏–º."


load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")


class FAQConfirmation(StatesGroup):
    confirm = State()


bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ (–ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
tokenizer = None
model = None


def initialize_model():
    global tokenizer, model
    if not tokenizer or not model:
        tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
        model = AutoModelForCausalLM.from_pretrained(MODEL_NAME)
        logger.info("–ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


async def generate_response(question: str) -> str:
    try:
        initialize_model()
        inputs = tokenizer(question, return_tensors="pt", max_length=512, truncation=True)
        outputs = model.generate(
            inputs.input_ids,
            max_new_tokens=400,
            temperature=0.7,
            repetition_penalty=1.2
        )
        response = tokenizer.decode(outputs[0], skip_special_tokens=True)[:400]
        save_generated_response(question, response)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}", exc_info=True)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å."


@dp.message(CommandStart())
async def start_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/help"), KeyboardButton(text="/reg")],
            [KeyboardButton(text="/update_faq"), KeyboardButton(text="/rewrite_faq")]
        ],
        resize_keyboard=True
    )
    await message.answer("ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.message(Command("help"))
async def help_handler(message: Message):
    help_text = (
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/reg - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/update_faq - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "/rewrite_faq - –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ FAQ"
    )
    await message.answer(help_text)


@dp.message(Command("reg"))
async def start_registration(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(RegistrationStates.name)


# ... (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç—Ç–∞–ø–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)

@dp.message(Command("update_faq"))
async def update_faq_command(message: Message):
    try:
        _, updated = merge_faq_from_excel("faq.xlsx")
        await message.answer(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated} –≤–æ–ø—Ä–æ—Å–æ–≤")
    except Exception as e:
        logger.error(f"FAQ update error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è FAQ")


@dp.message()
async def message_handler(message: Message, state: FSMContext):
    user_question = message.text.strip()

    # –ü–æ–∏—Å–∫ –≤ FAQ
    similar = []
    for q, a in get_all_faq_entries():
        if user_question.lower() in q.lower():
            similar.append((q, a))

    if similar:
        response = "üîç –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:\n\n" + "\n\n".join([f"‚ùì {q}\nüí° {a}" for q, a in similar])
    else:
        response = await generate_response(user_question)
        response = f"ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:\n\n{response}"

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ", callback_data="confirm_yes"),
         InlineKeyboardButton(text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", callback_data="confirm_no")]
    ])

    await message.answer(response, reply_markup=keyboard)
    await state.set_state(FAQConfirmation.confirm)


@dp.callback_query(FAQConfirmation.confirm)
async def confirm_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "confirm_no":
        await callback.message.answer("üìù –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
    await state.clear()


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤—ã–≤–æ–¥–∞ –¥–ª—è Windows
sys.stdout.reconfigure(encoding='utf-8')

async def main():
    try:
        create_tables()
        logger.info("Starting bot...")
        await dp.start_polling(bot)
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.critical(f"Critical error: {str(e)}", exc_info=True)
    finally:
        if bot.session:
            await bot.session.close()
        logger.info("Bot session closed")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Shutdown completed")


